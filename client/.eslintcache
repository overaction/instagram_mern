[{"D:\\Project\\react\\instagram_mern\\client\\src\\index.js":"1","D:\\Project\\react\\instagram_mern\\client\\src\\App.js":"2","D:\\Project\\react\\instagram_mern\\client\\src\\components\\Navbar.js":"3","D:\\Project\\react\\instagram_mern\\client\\src\\components\\screens\\Home.js":"4","D:\\Project\\react\\instagram_mern\\client\\src\\components\\screens\\Profile.js":"5","D:\\Project\\react\\instagram_mern\\client\\src\\components\\screens\\Signup.js":"6","D:\\Project\\react\\instagram_mern\\client\\src\\components\\screens\\SignIn.js":"7","D:\\Project\\react\\instagram_mern\\client\\src\\components\\screens\\CreatePost.js":"8","D:\\Project\\react\\instagram_mern\\client\\src\\reducers\\userReducer.js":"9","D:\\Project\\react\\instagram_mern\\client\\src\\components\\screens\\UserProfile.js":"10","D:\\Project\\react\\instagram_mern\\client\\src\\loading.js":"11","D:\\Project\\react\\instagram_mern\\client\\src\\Loading.js":"12","D:\\Project\\react\\instagram_mern\\client\\src\\components\\screens\\SubscribesUserPosts.js":"13","D:\\Project\\react\\instagram_mern\\client\\src\\components\\buttons\\GoogleBtn.js":"14"},{"size":219,"mtime":1607052513826,"results":"15","hashOfConfig":"16"},{"size":3263,"mtime":1608612004633,"results":"17","hashOfConfig":"16"},{"size":5247,"mtime":1608610741953,"results":"18","hashOfConfig":"16"},{"size":12256,"mtime":1608562593340,"results":"19","hashOfConfig":"16"},{"size":3401,"mtime":1607738610879,"results":"20","hashOfConfig":"16"},{"size":3815,"mtime":1608533309638,"results":"21","hashOfConfig":"16"},{"size":3203,"mtime":1608610244383,"results":"22","hashOfConfig":"16"},{"size":3037,"mtime":1607846765533,"results":"23","hashOfConfig":"16"},{"size":634,"mtime":1608559649235,"results":"24","hashOfConfig":"16"},{"size":5234,"mtime":1607613280299,"results":"25","hashOfConfig":"16"},{"size":173,"mtime":1607402871938,"results":"26","hashOfConfig":"16"},{"size":263,"mtime":1607405294674,"results":"27","hashOfConfig":"16"},{"size":7707,"mtime":1607609336577,"results":"28","hashOfConfig":"16"},{"size":308,"mtime":1608432752545,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"10a74bc",{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"32"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"32"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"32"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"32"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"D:\\Project\\react\\instagram_mern\\client\\src\\index.js",[],["66","67"],"D:\\Project\\react\\instagram_mern\\client\\src\\App.js",["68","69"],"D:\\Project\\react\\instagram_mern\\client\\src\\components\\Navbar.js",[],"D:\\Project\\react\\instagram_mern\\client\\src\\components\\screens\\Home.js",["70","71","72","73","74"],"import React, { Children, useContext, useEffect, useRef, useState } from 'react'\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { userContext } from '../../App';\r\nimport './EditPost.css';\r\nimport disableScroll from 'disable-scroll';\r\nimport ReactHashtag from 'react-hashtag';\r\nconst Home = () => {\r\n    const history = useHistory();\r\n    const [posts,setPosts] = useState([]);\r\n    const {state,dispatch} = useContext(userContext);\r\n\r\n    const [title, setTitle] = useState('');\r\n    const [body, setBody] = useState('');\r\n    const [image, setImage] = useState('');\r\n    const [url, setUrl] = useState('');\r\n    const [showEdit, setShowEdit] = useState(false);\r\n    const [clickedPost, setClickedPost] = useState('');\r\n    const postRef = useRef();\r\n    \r\n\r\n    // get all posts and update posts\r\n    useEffect(() => {\r\n        fetch('/allposts', {\r\n            method: 'get',\r\n            headers: {\r\n                'Authorization': 'Bearer '+localStorage.getItem('jwt')\r\n            },\r\n        }).then(res => res.json())\r\n        .then(result => {\r\n            console.log(`allposts`)\r\n            console.log(result);\r\n            // 에러 발생 시엔 로그인 페이지로 이동\r\n            if(result.error) {\r\n                history.push('/signin')\r\n            }\r\n            else {\r\n                setPosts(result.posts);\r\n            }\r\n        })\r\n    },[]);\r\n    // update post\r\n    useEffect(() => {\r\n        if(clickedPost)\r\n            updatePost(clickedPost);\r\n    },[url])\r\n\r\n    const updatePost = (postId) => {\r\n        fetch(`/updatepost/${postId}`, {\r\n            method: 'put',\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                'Authorization': 'Bearer '+localStorage.getItem('jwt')\r\n            },\r\n            body: JSON.stringify({\r\n                title,\r\n                body,\r\n                pic:url\r\n            })\r\n        })\r\n        .then(res => res.json())\r\n        .then(result => {\r\n            const newData = posts.map((item) => {\r\n                if(postId === item._id)\r\n                    return result;\r\n                else\r\n                    return item;\r\n            })\r\n            setPosts(newData);\r\n        })\r\n        disableScroll.off();\r\n        setShowEdit(false);\r\n    }\r\n\r\n    const likePost = (id) => {\r\n        fetch('/like', {\r\n            method: 'put',\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                'Authorization': 'Bearer '+localStorage.getItem('jwt')\r\n            },\r\n            body: JSON.stringify({\r\n                postId: id\r\n            })\r\n        }).then(res => res.json())\r\n        .then(result => {\r\n            const newData = posts.map(item => {\r\n                // 만약 기존 posts의 id === 좋아요 누른 post의 id 이라면\r\n                // 좋아요 누른 post로 교체\r\n                if(item._id === result._id) {\r\n                    return result;\r\n                }\r\n                // 아니라면 기존값 그대로 리턴\r\n                else {\r\n                    return item;\r\n                }\r\n            })\r\n            setPosts(newData);\r\n        }).catch(err => console.log(err));\r\n    }\r\n    const unlikePost = (id) => {\r\n        fetch('/unlike', {\r\n            method: 'put',\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                'Authorization': 'Bearer '+localStorage.getItem('jwt')\r\n            },\r\n            body: JSON.stringify({\r\n                postId: id\r\n            })\r\n        }).then(res => res.json())\r\n        .then(result => {\r\n            console.log('dislike')\r\n            console.log(result)\r\n            const newData = posts.map(item => {\r\n                if(item._id === result._id) {\r\n                    return result;\r\n                }\r\n                else {\r\n                    return item;\r\n                }\r\n            })\r\n            setPosts(newData);\r\n        }).catch(err => console.log(err));\r\n    }\r\n    const makeComment = (text, postId) => {\r\n        fetch('/comment', {\r\n            method: 'put',\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                'Authorization': 'Bearer '+localStorage.getItem('jwt')\r\n            },\r\n            body: JSON.stringify({\r\n                text: text,\r\n                postId: postId,                \r\n            })\r\n        })\r\n        .then(res => res.json())\r\n        .then(result => {\r\n            const newData = posts.map((item) => {\r\n                if(item._id === result._id) {\r\n                    return result\r\n                }\r\n                else {\r\n                    return item\r\n                }\r\n            })\r\n            setPosts(newData);\r\n        }).catch(err => console.log(err));\r\n    }\r\n    const deletePost = (postId) => {\r\n        fetch(`/deletepost/${postId}`, {\r\n            method: 'delete',\r\n            headers: {\r\n                'Authorization': 'Bearer '+localStorage.getItem('jwt')\r\n            },\r\n        })\r\n        .then(res => res.json())\r\n        .then(result => {\r\n            console.log('deleted')\r\n            console.log(result);\r\n            // 삭제한 post의 id를 통해 해당 post는 filter 함\r\n            const newData = posts.filter(item => {\r\n                return item._id !== result._id\r\n            })\r\n            setPosts(newData);\r\n        })\r\n    }\r\n    const deleteComment = (postId,commentId) => {\r\n        fetch(`/deletecomment/${postId}/${commentId}`, {\r\n            method: 'delete',\r\n            headers: {\r\n                'Authorization': 'Bearer '+localStorage.getItem('jwt')\r\n            },\r\n        })\r\n        .then(res => res.json())\r\n        .then(result => {\r\n            console.log(`delete comment`);\r\n            console.log(result);\r\n            const newData = posts.map(item => {\r\n                if(item._id === result._id)\r\n                    return result;\r\n                else\r\n                    return item;\r\n            })\r\n            setPosts(newData);\r\n        }).catch(err => console.log(err));\r\n    }\r\n\r\n    const postDetails = async () => {\r\n        const data = new FormData()\r\n        data.append(\"file\", image);\r\n        data.append(\"upload_preset\",\"insta-mern\"); // cloudinary upload preset 이름\r\n        data.append(\"cloud_name\", \"kmc\"); // cloudinary 내 닉네임\r\n        await fetch(\"https://api.cloudinary.com/v1_1/kmc/image/upload\", {\r\n            method: \"post\",\r\n            body: data,\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            setUrl(data.url);\r\n        })\r\n        .catch(err => console.log(err))\r\n    }\r\n\r\n    const setEdit = (postId) => {\r\n        const height = (window.innerHeight - postRef.current.clientHeight)/2 + window.scrollY - 200;\r\n        const left = (window.innerWidth - postRef.current.clientWidth)/2 + window.scrollX - 200;\r\n        console.log(height)\r\n        postRef.current.style.top = height+\"px\"\r\n        postRef.current.style.left = left+\"px\"\r\n        disableScroll.on();\r\n        setShowEdit(true);\r\n        setClickedPost(postId);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={showEdit ? \"home-disable\" : \"home\"}>\r\n                {posts.map((item) => {\r\n                    return (\r\n                    <div className=\"card home-card\" key={item._id}>\r\n                        <div className=\"card-tool\">\r\n                            <h5 className=\"card-name\">\r\n                                {item.postedBy._id === state._id ?\r\n                                <Link to={\"/profile/\"}>{item.postedBy.name}</Link>\r\n                                :\r\n                                <Link to={\"/profile/\"+item.postedBy._id}>{item.postedBy.name}</Link>\r\n                                }\r\n                            </h5>\r\n                            {item.postedBy._id === state._id \r\n                            ? \r\n                            <div>\r\n                                <i className=\"material-icons\" style={{float:'right'}} onClick={() => deletePost(item._id)}>delete</i>\r\n                                <i className=\"material-icons\" style={{float:'right'}} onClick={() => setEdit(item._id)}>create</i> \r\n                            </div> \r\n                            : \r\n                            ''}\r\n                        </div>\r\n                        <div className=\"card-image\">\r\n                            <img src={item.photo} />\r\n                        </div>\r\n                        <div className=\"card-content\">\r\n                            <i className=\"material-icons\">favorite</i>\r\n                            {item.likes.includes(state._id)\r\n                            ? <i className=\"material-icons\" onClick={() => unlikePost(item._id)}>thumb_down</i>\r\n                            :  <i className=\"material-icons\" onClick={() => likePost(item._id)}>thumb_up</i>\r\n                            }\r\n                            <h6>{item.likes.length} likes</h6>\r\n                            <h6>{item.title}</h6>\r\n                            <p>{item.body}</p>\r\n                            {\r\n                                item.comments.map(comment => {\r\n                                    return (\r\n                                        <h6 key={comment._id}>\r\n                                            <span className=\"card-commentby\">{comment.commentBy.name}</span>\r\n                                            <ReactHashtag onHashtagClick={(e) => {\r\n                                                const length = e.length;\r\n                                                const hashtag = e.substring(1,length);\r\n                                                console.log(hashtag);\r\n                                            }}>{comment.text}</ReactHashtag>\r\n                                            {comment.commentBy._id === state._id\r\n                                            ?\r\n                                            <i className=\"material-icons\" style={{float:'right'}} onClick={() => deleteComment(item._id,comment._id)}>delete</i>\r\n                                            :\r\n                                            ''\r\n                                            }\r\n                                        </h6>\r\n                                    )\r\n                                })\r\n                            }\r\n                            <form onSubmit={(e) => {\r\n                                e.preventDefault();\r\n                                makeComment(e.target.comment.value, item._id)\r\n                                e.target.comment.value = '';\r\n                            }}>\r\n                                <input name=\"comment\" type=\"text\" placeholder=\"add a comment\" />\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                    )\r\n                })}\r\n            </div>\r\n            <div className={showEdit ? \"editPost card input-filed editPost-visible\" : \"editPost card input-filed\"} ref={postRef}>\r\n                <i className=\"material-icons\" style={{float:'right'}} \r\n                onClick={() => \r\n                {setShowEdit(false)\r\n                disableScroll.off()}}>\r\n                clear\r\n                </i>\r\n                <input type=\"text\" placeholder=\"title\" value={title} onChange={(e) => setTitle(e.target.value)}/>\r\n                <input type=\"text\" placeholder=\"body\" value={body} onChange={(e) => setBody(e.target.value)}/>\r\n                <div className=\"file-field input-field\">\r\n                    <div className=\"btn #64b5f6 blue darken-1\">\r\n                        <span>Upload Image</span>\r\n                        <input type=\"file\" onChange={(e) => setImage(e.target.files[0])}/>\r\n                    </div>\r\n                    <div className=\"file-path-wrapper\">\r\n                        <input className=\"file-path validate\" type=\"text\" />\r\n                    </div>\r\n                </div>\r\n                <button className=\"btn waves-effect waves-light #64b5f6 blue darken-1\" onClick={() => postDetails()}>\r\n                    Submit Post\r\n                </button>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Home\r\n","D:\\Project\\react\\instagram_mern\\client\\src\\components\\screens\\Profile.js",["75","76"],"import React, { useContext, useEffect, useRef, useState } from \"react\";\r\nimport { userContext } from '../../App';\r\nimport './Profile.css'\r\nconst Profile = () => {\r\n    const [myposts, setMyposts] = useState([]);\r\n    const {state,dispatch} = useContext(userContext);\r\n    const [image, setImage] = useState('');\r\n    const fileInput = useRef();\r\n    useEffect(() => {\r\n        fetch('/mypost', {\r\n            method: 'get',\r\n            headers: {\r\n                'Authorization': 'Bearer '+localStorage.getItem('jwt')\r\n            },\r\n        }).then(res => res.json())\r\n        .then(result => {\r\n            setMyposts(result.mypost);\r\n            console.log(result);\r\n        })\r\n    },[])\r\n\r\n    useEffect(() => {\r\n        if(image) {\r\n            const data = new FormData()\r\n            data.append(\"file\", image);\r\n            data.append(\"upload_preset\",\"insta-mern\"); // cloudinary upload preset 이름\r\n            data.append(\"cloud_name\", \"kmc\"); // cloudinary 내 닉네임\r\n            fetch(\"https://api.cloudinary.com/v1_1/kmc/image/upload\", {\r\n                method: \"post\",\r\n                body: data,\r\n            })\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                localStorage.setItem('svuser',JSON.stringify({...state, pic :data.url}));\r\n                dispatch({type:\"UPDATE_PROFILE\",payload: {\r\n                    pic: data.url\r\n                }})\r\n                fetch('/updatepic', {\r\n                    method: 'put',\r\n                    headers: {\r\n                        'Authorization': 'Bearer '+localStorage.getItem('jwt'),\r\n                        'Content-type': 'application/json'\r\n                    },\r\n                    body: JSON.stringify({\r\n                        pic: data.url\r\n                    })\r\n                })\r\n                .then(res => res.json())\r\n                .then(result => console.log(result))\r\n            })\r\n            .catch(err => console.log(err))\r\n        }\r\n    },[image]);\r\n\r\n    const uploadProfileImg = (file) => {\r\n        setImage(file);\r\n    }\r\n\r\n    return (\r\n    \r\n        <div className=\"profileContainer\">\r\n            <div className=\"profile-mine\">\r\n                <input type=\"file\" style={{display: \"none\"}} onChange={(e) => uploadProfileImg(e.target.files[0])} ref={fileInput}/>\r\n                <img className=\"myimage\" onClick={() => {\r\n                    fileInput.current.click()\r\n                }}\r\n                    src={state ? state.pic : 'loading'}\r\n                />\r\n                <div>\r\n                    <h4>{state ? state.name : \"Loading\"}</h4>\r\n                    <h5>{state ? state.email : \"Loading\"}</h5>\r\n                    <div style={{display:\"flex\", justifyContent:\"space-between\", width: \"108%\"}}>\r\n                        <h6>{myposts.length} posts</h6>\r\n                        <h6>{state ? state.followers.length : 0} followers</h6>\r\n                        <h6>{state ? state.followings.length: 0} followings</h6>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"gallery\">\r\n                {myposts.map((item) => {\r\n                    return (\r\n                        <img className=\"gallery-item\" key={item._id} src={item.photo} alt={item.title} />\r\n                    )\r\n                })}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Profile;\r\n","D:\\Project\\react\\instagram_mern\\client\\src\\components\\screens\\Signup.js",["77","78","79"],"import React, { useEffect, useState } from \"react\";\r\nimport './Sign.css'\r\nimport {Link, useHistory} from 'react-router-dom';\r\nimport M from 'materialize-css';\r\nconst SignUp = () => {\r\n    const history = useHistory();\r\n    const [name, setName] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [image, setImage] = useState('');\r\n    const [url, setUrl] = useState(undefined);\r\n\r\n    useEffect(() => {\r\n        if(url) {\r\n            uploadFields();\r\n        }\r\n    },[url]);\r\n\r\n    const uploadPic = async () => {\r\n        const data = new FormData()\r\n        data.append(\"file\", image);\r\n        data.append(\"upload_preset\",\"insta-mern\"); // cloudinary upload preset 이름\r\n        data.append(\"cloud_name\", \"kmc\"); // cloudinary 내 닉네임\r\n        await fetch(\"https://api.cloudinary.com/v1_1/kmc/image/upload\", {\r\n            method: \"post\",\r\n            body: data,\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            // url이 업데이트 되었을 때 usEffect를 통해 posting 해준다\r\n            setUrl(data.url);\r\n        })\r\n        .catch(err => console.log(err))\r\n    }\r\n\r\n    const uploadFields = async () => {\r\n        if(!/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test(email)) {\r\n            return M.toast({html: \"invalid email\", classes:\"#c62828 red darken-3\"})\r\n        }\r\n        await fetch('/signup', {\r\n            method: 'post',\r\n            headers: {\r\n                'Content-type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                name,\r\n                password,\r\n                email,\r\n                pic: url\r\n            })\r\n        }).then(res => res.json())\r\n        .then((data) => {\r\n            if(data.error) {\r\n                M.toast({html: data.error, classes:\"#c62828 red darken-3\"})\r\n            }\r\n            else {\r\n                M.toast({html: data.message, classes:\"#43a047 green darken-1\"});\r\n                history.push('/signin');\r\n            }\r\n        })\r\n        .catch(err => console.log(err));\r\n    }\r\n\r\n    const PostData = async () => {\r\n        if(image) {\r\n            uploadPic()\r\n        }\r\n        else {\r\n            uploadFields();\r\n        }\r\n        \r\n    }\r\n\r\n    return (\r\n        <div className=\"mycard\">\r\n            <div className=\"card auth-card\">\r\n                <h2>Instagram</h2>\r\n                <input type=\"text\" placeholder=\"name\" value={name} onChange={(e) => setName(e.target.value)}/>\r\n                <input type=\"text\" placeholder=\"email\" value={email} onChange={(e) => setEmail(e.target.value)}/>\r\n                <input type=\"password\" placeholder=\"password\" value={password} onChange={(e) => setPassword(e.target.value)}/>\r\n                <div className=\"file-field input-field\">\r\n                    <div className=\"btn #64b5f6 blue darken-1\">\r\n                        <span>Upload Image</span>\r\n                        <input type=\"file\" onChange={(e) => setImage(e.target.files[0])}/>\r\n                    </div>\r\n                    <div className=\"file-path-wrapper\">\r\n                        <input className=\"file-path validate\" type=\"text\" />\r\n                    </div>\r\n                </div>\r\n                <button\r\n                    className=\"btn waves-effect waves-light #64b5f6 blue darken-1\"\r\n                    onClick={() => PostData()}\r\n                >\r\n                    SignUp\r\n                </button>\r\n                <h5 className=\"signup-toggle\">\r\n                    <Link to=\"/signin\">Already have an account ?</Link>\r\n                </h5>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SignUp;\r\n","D:\\Project\\react\\instagram_mern\\client\\src\\components\\screens\\SignIn.js",["80","81"],"import React, { useContext, useState } from \"react\";\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport './Sign.css'\r\nimport M from 'materialize-css';\r\nimport GoogleBtn from '../buttons/GoogleBtn';\r\nimport { userContext } from '../../App';\r\nimport axios from 'axios';\r\nconst SignIn = () => {\r\n    const {dispatch} = useContext(userContext);\r\n    const history = useHistory();\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n\r\n    const PostData = async () => {\r\n        if(!/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test(email)) {\r\n            return M.toast({html: \"invalid email\", classes:\"#c62828 red darken-3\"})\r\n        }\r\n        await fetch('/signin', {\r\n            method: 'post',\r\n            headers: {\r\n                'Content-type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                password,\r\n                email,\r\n            })\r\n        }).then(res => res.json())\r\n        .then((data) => {\r\n            console.log(data)\r\n            if(data.error) {\r\n                M.toast({html: data.error, classes:\"#c62828 red darken-3\"})\r\n            }\r\n            else {\r\n                localStorage.setItem(\"jwt\",data.token);\r\n                localStorage.setItem(\"svuser\",JSON.stringify(data.svuser))\r\n\r\n                dispatch({type:\"USER\", payload:data.svuser});\r\n\r\n                M.toast({html: \"signedin success\", classes:\"#43a047 green darken-1\"});\r\n                history.push('/');\r\n            }\r\n        })\r\n        .catch(err => {\r\n            console.log(err)\r\n        });\r\n    }\r\n\r\n    const googleLogin = () => {\r\n        axios.get('/api/current_user')\r\n        .then((data) => {\r\n            console.log(data);\r\n            localStorage.setItem(\"jwt\",data.data.token);\r\n            localStorage.setItem(\"svuser\",JSON.stringify(data.data.svuser))\r\n            dispatch({type:'USER',payload:data.data.svuser});\r\n        })\r\n        .catch(() => console.log('google account data not found'));\r\n    }\r\n    return (\r\n        <div className=\"mycard\">\r\n            <div className=\"card auth-card\">\r\n                <h2>Instagram</h2>\r\n                <input type=\"text\" placeholder=\"email\" value={email} onChange={(e) => setEmail(e.target.value)}/>\r\n                <input type=\"password\" placeholder=\"password\" value={password} onChange={(e) => setPassword(e.target.value)}/>\r\n                <button\r\n                    className=\"btn waves-effect waves-light #64b5f6 blue darken-1\"\r\n                    onClick={() => PostData()}\r\n                >\r\n                    Submit\r\n                </button>\r\n                <h5 className=\"signup-toggle\">\r\n                    <Link to=\"/signup\">Don't have an account ?</Link>\r\n                </h5>\r\n                <a href=\"/auth/google\">\r\n                    <button className=\"signup-google\" onClick={() => googleLogin()}>\r\n                        <GoogleBtn/> Google로 로그인하기\r\n                    </button>\r\n                </a>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SignIn;\r\n","D:\\Project\\react\\instagram_mern\\client\\src\\components\\screens\\CreatePost.js",["82"],"import React, { useEffect, useState } from 'react'\r\nimport './CreatePost.css';\r\nimport M from 'materialize-css';\r\nimport { useHistory } from 'react-router-dom';\r\nconst CreatePost = () => {\r\n    const history = useHistory();\r\n    const [title, setTitle] = useState('');\r\n    const [body, setBody] = useState('');\r\n    const [image, setImage] = useState('');\r\n    const [url, setUrl] = useState('');\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            await fetch('/createpost', {\r\n                method: 'post',\r\n                headers: {\r\n                    'Content-type': 'application/json',\r\n                    'Authorization': 'Bearer '+localStorage.getItem('jwt')\r\n                },\r\n                body: JSON.stringify({\r\n                    title,\r\n                    body,\r\n                    pic:url, \r\n                })\r\n            }).then(res => res.json())\r\n            .then((data) => {\r\n                console.log(data)\r\n                if(data.error) {\r\n                    M.toast({html: data.error, classes:\"#c62828 red darken-3\"})\r\n                }\r\n                else {\r\n                    M.toast({html: \"posted successfully\", classes:\"#43a047 green darken-1\"});\r\n                    history.push('/');\r\n                }\r\n            })\r\n            .catch(err => console.log(err));\r\n        }\r\n        if(url) {\r\n            fetchData();\r\n        }\r\n    },[url])\r\n\r\n    const postDetails = async () => {\r\n        const data = new FormData()\r\n        data.append(\"file\", image);\r\n        data.append(\"upload_preset\",\"insta-mern\"); // cloudinary upload preset 이름\r\n        data.append(\"cloud_name\", \"kmc\"); // cloudinary 내 닉네임\r\n        await fetch(\"https://api.cloudinary.com/v1_1/kmc/image/upload\", {\r\n            method: \"post\",\r\n            body: data,\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            // url이 업데이트 되었을 때 usEffect를 통해 posting 해준다\r\n            setUrl(data.url);\r\n        })\r\n        .catch(err => console.log(err))\r\n    }\r\n\r\n    return (\r\n        <div className=\"createPost card input-filed\">\r\n            <input type=\"text\" placeholder=\"title\" value={title} onChange={(e) => setTitle(e.target.value)}/>\r\n            <input type=\"text\" placeholder=\"body\" value={body} onChange={(e) => setBody(e.target.value)}/>\r\n            <div className=\"file-field input-field\">\r\n                <div className=\"btn #64b5f6 blue darken-1\">\r\n                    <span>Upload Image</span>\r\n                    <input type=\"file\" onChange={(e) => setImage(e.target.files[0])}/>\r\n                </div>\r\n                <div className=\"file-path-wrapper\">\r\n                    <input className=\"file-path validate\" type=\"text\" />\r\n                </div>\r\n            </div>\r\n            <button className=\"btn waves-effect waves-light #64b5f6 blue darken-1\" onClick={() => postDetails()}>\r\n                Submit Post\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CreatePost\r\n","D:\\Project\\react\\instagram_mern\\client\\src\\reducers\\userReducer.js",[],"D:\\Project\\react\\instagram_mern\\client\\src\\components\\screens\\UserProfile.js",["83","84"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport { userContext } from '../../App';\r\nimport './Profile.css'\r\nimport {useParams} from 'react-router-dom';\r\nimport Loading from '../../Loading';\r\nconst Profile = () => {\r\n    const [userProfile, setProfile] = useState(null);\r\n    const {state,dispatch} = useContext(userContext);\r\n    const {userId} = useParams();\r\n    const [showFollow, setShowFollow] = useState(state ? !state.followings.includes(userId) : true);\r\n    useEffect(() => {\r\n        fetch(`/user/${userId}`, {\r\n            method: 'get',\r\n            headers: {\r\n                'Authorization': 'Bearer '+localStorage.getItem('jwt')\r\n            },\r\n        }).then(res => res.json())\r\n        .then(result => {\r\n            setProfile(result);\r\n        })\r\n    },[])\r\n\r\n    const followUser = () => {\r\n        fetch(\"/follow\", {\r\n            method: 'put',\r\n            headers: {\r\n                \"Content-type\": 'application/json',\r\n                'Authorization': 'Bearer '+localStorage.getItem('jwt')\r\n            },\r\n            body: JSON.stringify({\r\n                followId: userId           \r\n            })\r\n        })\r\n        .then(res => res.json())\r\n        .then(result => {\r\n            console.log(result.myinfo);\r\n            // 상태 업데이트\r\n            dispatch({type:\"UPDATE\",payload: {\r\n                followings: result.myinfo.followings,\r\n                followers: result.myinfo.followers,\r\n            }})\r\n            // 로컬 업데이트\r\n            localStorage.setItem(\"svuser\",JSON.stringify(result.myinfo));\r\n            // profile 업데이트\r\n            setProfile((prev) => {\r\n                return {\r\n                    ...prev,\r\n                    user: {\r\n                        ...prev.user,\r\n                        followers: [...prev.user.followers, result.otheruser._id]\r\n                    }\r\n                }\r\n            })\r\n        })\r\n        setShowFollow(false);\r\n    }\r\n\r\n    const unfollowUser = () => {\r\n        fetch('/unfollow', {\r\n            method: 'put',\r\n            headers: {\r\n                \"Content-type\": 'application/json',\r\n                'Authorization': 'Bearer '+localStorage.getItem('jwt')\r\n            },\r\n            body: JSON.stringify({\r\n                unfollowId: userId,\r\n            })\r\n        })\r\n        .then(res => res.json())\r\n        .then(result => {\r\n            console.log(result);\r\n            dispatch({type:\"UPDATE\",payload: {\r\n                followings: result.result2.followings,\r\n                followers: result.result2.followers,\r\n            }})\r\n            localStorage.setItem('svuser',JSON.stringify(result.result2));\r\n            setProfile(prev => {\r\n                const newfollowers = result.result2.followers.filter(item => item._id !== userId)\r\n                return {\r\n                    ...prev,\r\n                    user: {\r\n                        ...prev.user,\r\n                        followers: newfollowers\r\n                    }\r\n                }\r\n            })\r\n        })\r\n        setShowFollow(true);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {!userProfile ? \r\n            <Loading /> \r\n            : \r\n                <div className=\"profileContainer\">\r\n                    <div className=\"profile-mine\">\r\n                        <img className=\"myimage\"\r\n                            src={userProfile.user.pic}\r\n                        />\r\n                        <div>\r\n                            <h4>{userProfile.user.name}</h4>\r\n                            {showFollow\r\n                            ?\r\n                            <button\r\n                                className=\"btn waves-effect waves-light #64b5f6 blue darken-1\"\r\n                                onClick={() => followUser()}\r\n                            >\r\n                                Follow\r\n                            </button>\r\n                            :\r\n                            <button\r\n                                className=\"btn waves-effect waves-light #64b5f6 blue darken-1\"\r\n                                onClick={() => unfollowUser()}\r\n                            >\r\n                                unFollow\r\n                            </button>\r\n                            }\r\n                            <h5>{userProfile.user.email}</h5>\r\n                            <div style={{display:\"flex\", justifyContent:\"space-between\", width: \"108%\"}}>\r\n                                <h6>{userProfile.posts.length} posts</h6>\r\n                                <h6>{userProfile.user.followers.length} followers</h6>\r\n                                <h6>{userProfile.user.followings.length} followings</h6>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"gallery\">\r\n                        {userProfile.posts.map((item) => {\r\n                            return (\r\n                                <img className=\"gallery-item\" key={item._id} src={item.photo} alt={item.title} />\r\n                            )\r\n                        })}\r\n                    </div>\r\n                </div>\r\n            }\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Profile;\r\n","D:\\Project\\react\\instagram_mern\\client\\src\\loading.js",["85"],"D:\\Project\\react\\instagram_mern\\client\\src\\Loading.js",[],"D:\\Project\\react\\instagram_mern\\client\\src\\components\\screens\\SubscribesUserPosts.js",["86","87","88"],"import React, { useContext, useEffect, useState } from 'react'\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { userContext } from '../../App';\r\nimport './Home.css';\r\nconst Home = () => {\r\n    const history = useHistory();\r\n    const [posts,setPosts] = useState([]);\r\n    const {state,dispatch} = useContext(userContext);\r\n\r\n    useEffect(() => {\r\n        fetch('/allfollowposts', {\r\n            method: 'get',\r\n            headers: {\r\n                'Authorization': 'Bearer '+localStorage.getItem('jwt')\r\n            },\r\n        }).then(res => res.json())\r\n        .then(result => {\r\n            console.log(`allposts`)\r\n            console.log(result);\r\n            if(result.error) {\r\n                history.push('/signin')\r\n            }\r\n            else {\r\n                setPosts(result.posts);\r\n            }\r\n        })\r\n    },[]);\r\n\r\n    const likePost = (id) => {\r\n        fetch('/like', {\r\n            method: 'put',\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                'Authorization': 'Bearer '+localStorage.getItem('jwt')\r\n            },\r\n            body: JSON.stringify({\r\n                postId: id\r\n            })\r\n        }).then(res => res.json())\r\n        .then(result => {\r\n            const newData = posts.map(item => {\r\n                // 만약 기존 posts의 id === 좋아요 누른 post의 id 이라면\r\n                // 좋아요 누른 post로 교체\r\n                if(item._id === result._id) {\r\n                    return result;\r\n                }\r\n                // 아니라면 기존값 그대로 리턴\r\n                else {\r\n                    return item;\r\n                }\r\n            })\r\n            setPosts(newData);\r\n        }).catch(err => console.log(err));\r\n    }\r\n    const unlikePost = (id) => {\r\n        fetch('/unlike', {\r\n            method: 'put',\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                'Authorization': 'Bearer '+localStorage.getItem('jwt')\r\n            },\r\n            body: JSON.stringify({\r\n                postId: id\r\n            })\r\n        }).then(res => res.json())\r\n        .then(result => {\r\n            console.log('dislike')\r\n            console.log(result)\r\n            const newData = posts.map(item => {\r\n                if(item._id === result._id) {\r\n                    return result;\r\n                }\r\n                else {\r\n                    return item;\r\n                }\r\n            })\r\n            setPosts(newData);\r\n        }).catch(err => console.log(err));\r\n    }\r\n\r\n    const makeComment = (text, postId) => {\r\n        fetch('/comment', {\r\n            method: 'put',\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                'Authorization': 'Bearer '+localStorage.getItem('jwt')\r\n            },\r\n            body: JSON.stringify({\r\n                text: text,\r\n                postId: postId,                \r\n            })\r\n        })\r\n        .then(res => res.json())\r\n        .then(result => {\r\n            const newData = posts.map((item) => {\r\n                if(item._id === result._id) {\r\n                    return result\r\n                }\r\n                else {\r\n                    return item\r\n                }\r\n            })\r\n            setPosts(newData);\r\n        }).catch(err => console.log(err));\r\n    }\r\n\r\n    const deletePost = (postId) => {\r\n        fetch(`/deletepost/${postId}`, {\r\n            method: 'delete',\r\n            headers: {\r\n                'Authorization': 'Bearer '+localStorage.getItem('jwt')\r\n            },\r\n        })\r\n        .then(res => res.json())\r\n        .then(result => {\r\n            console.log('deleted')\r\n            console.log(result);\r\n            // 삭제한 post의 id를 통해 해당 post는 filter 함\r\n            const newData = posts.filter(item => {\r\n                return item._id !== result._id\r\n            })\r\n            setPosts(newData);\r\n        })\r\n    }\r\n\r\n    const deleteComment = (postId,commentId) => {\r\n        fetch(`/deletecomment/${postId}/${commentId}`, {\r\n            method: 'delete',\r\n            headers: {\r\n                'Authorization': 'Bearer '+localStorage.getItem('jwt')\r\n            },\r\n        })\r\n        .then(res => res.json())\r\n        .then(result => {\r\n            console.log(`delete comment`);\r\n            console.log(result);\r\n            const newData = posts.map(item => {\r\n                if(item._id === result._id)\r\n                    return result;\r\n                else\r\n                    return item;\r\n            })\r\n            setPosts(newData);\r\n        }).catch(err => console.log(err));\r\n    }\r\n\r\n    return (\r\n        <div className=\"home\">\r\n            {posts.map((item) => {\r\n                return (\r\n                <div className=\"card home-card\" key={item._id}>\r\n                    <div className=\"card-tool\">\r\n                        <h5 className=\"card-name\">\r\n                            {item.postedBy._id === state._id ?\r\n                            <Link to={\"/profile/\"}>{item.postedBy.name}</Link>\r\n                            :\r\n                            <Link to={\"/profile/\"+item.postedBy._id}>{item.postedBy.name}</Link>\r\n                            }\r\n                        </h5>\r\n                        {item.postedBy._id === state._id \r\n                        ? \r\n                        <i className=\"material-icons\" style={{float:'right'}} onClick={() => deletePost(item._id)}>delete</i> \r\n                        : \r\n                        ''}\r\n                    </div>\r\n                    <div className=\"card-image\">\r\n                        <img src={item.photo} />\r\n                    </div>\r\n                    <div className=\"card-content\">\r\n                        <i className=\"material-icons\">favorite</i>\r\n                        {item.likes.includes(state._id)\r\n                        ? <i className=\"material-icons\" onClick={() => unlikePost(item._id)}>thumb_down</i>\r\n                        :  <i className=\"material-icons\" onClick={() => likePost(item._id)}>thumb_up</i>\r\n                        }\r\n                        <h6>{item.likes.length} likes</h6>\r\n                        <h6>{item.title}</h6>\r\n                        <p>{item.body}</p>\r\n                        {\r\n                            item.comments.map(comment => {\r\n                                return (\r\n                                    <h6 key={comment._id}>\r\n                                        <span className=\"card-commentby\">{comment.commentBy.name}</span>\r\n                                        {comment.text}\r\n                                        {comment.commentBy._id === state._id\r\n                                        ?\r\n                                        <i className=\"material-icons\" style={{float:'right'}} onClick={() => deleteComment(item._id,comment._id)}>delete</i>\r\n                                        :\r\n                                        ''\r\n                                        }\r\n                                    </h6>\r\n                                )\r\n                            })\r\n                        }\r\n                        <form onSubmit={(e) => {\r\n                            e.preventDefault();\r\n                            makeComment(e.target.comment.value, item._id)\r\n                            e.target.comment.value = '';\r\n                        }}>\r\n                            <input name=\"comment\" type=\"text\" placeholder=\"add a comment\" />\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n                )\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Home\r\n","D:\\Project\\react\\instagram_mern\\client\\src\\components\\buttons\\GoogleBtn.js",[],{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","severity":1,"message":"94","line":22,"column":13,"nodeType":"95","messageId":"96","endLine":22,"endColumn":18},{"ruleId":"97","severity":1,"message":"98","line":48,"column":8,"nodeType":"99","endLine":48,"endColumn":17,"suggestions":"100"},{"ruleId":"93","severity":1,"message":"101","line":1,"column":17,"nodeType":"95","messageId":"96","endLine":1,"endColumn":25},{"ruleId":"93","severity":1,"message":"102","line":10,"column":18,"nodeType":"95","messageId":"96","endLine":10,"endColumn":26},{"ruleId":"97","severity":1,"message":"103","line":40,"column":7,"nodeType":"99","endLine":40,"endColumn":9,"suggestions":"104"},{"ruleId":"97","severity":1,"message":"105","line":45,"column":7,"nodeType":"99","endLine":45,"endColumn":12,"suggestions":"106"},{"ruleId":"107","severity":1,"message":"108","line":240,"column":29,"nodeType":"109","endLine":240,"endColumn":53},{"ruleId":"97","severity":1,"message":"110","line":53,"column":7,"nodeType":"99","endLine":53,"endColumn":14,"suggestions":"111"},{"ruleId":"107","severity":1,"message":"108","line":64,"column":17,"nodeType":"109","endLine":68,"endColumn":19},{"ruleId":"97","severity":1,"message":"112","line":17,"column":7,"nodeType":"99","endLine":17,"endColumn":12,"suggestions":"113"},{"ruleId":"114","severity":1,"message":"115","line":37,"column":23,"nodeType":"116","messageId":"117","endLine":37,"endColumn":24,"suggestions":"118"},{"ruleId":"114","severity":1,"message":"115","line":37,"column":48,"nodeType":"116","messageId":"117","endLine":37,"endColumn":49,"suggestions":"119"},{"ruleId":"114","severity":1,"message":"115","line":15,"column":23,"nodeType":"116","messageId":"117","endLine":15,"endColumn":24,"suggestions":"120"},{"ruleId":"114","severity":1,"message":"115","line":15,"column":48,"nodeType":"116","messageId":"117","endLine":15,"endColumn":49,"suggestions":"121"},{"ruleId":"97","severity":1,"message":"122","line":41,"column":7,"nodeType":"99","endLine":41,"endColumn":12,"suggestions":"123"},{"ruleId":"97","severity":1,"message":"124","line":21,"column":7,"nodeType":"99","endLine":21,"endColumn":9,"suggestions":"125"},{"ruleId":"107","severity":1,"message":"108","line":98,"column":25,"nodeType":"109","endLine":100,"endColumn":27},{"ruleId":"107","severity":1,"message":"108","line":5,"column":13,"nodeType":"109","endLine":5,"endColumn":38},{"ruleId":"93","severity":1,"message":"102","line":8,"column":18,"nodeType":"95","messageId":"96","endLine":8,"endColumn":26},{"ruleId":"97","severity":1,"message":"103","line":27,"column":7,"nodeType":"99","endLine":27,"endColumn":9,"suggestions":"126"},{"ruleId":"107","severity":1,"message":"108","line":167,"column":25,"nodeType":"109","endLine":167,"endColumn":49},"no-native-reassign",["127"],"no-negated-in-lhs",["128"],"no-unused-vars","'state' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["129"],"'Children' is defined but never used.","'dispatch' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["130"],"React Hook useEffect has missing dependencies: 'clickedPost' and 'updatePost'. Either include them or remove the dependency array.",["131"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has missing dependencies: 'dispatch' and 'state'. Either include them or remove the dependency array.",["132"],"React Hook useEffect has a missing dependency: 'uploadFields'. Either include it or remove the dependency array.",["133"],"no-useless-escape","Unnecessary escape character: \\[.","Literal","unnecessaryEscape",["134","135"],["136","137"],["138","139"],["140","141"],"React Hook useEffect has missing dependencies: 'body', 'history', and 'title'. Either include them or remove the dependency array.",["142"],"React Hook useEffect has a missing dependency: 'userId'. Either include it or remove the dependency array.",["143"],["144"],"no-global-assign","no-unsafe-negation",{"desc":"145","fix":"146"},{"desc":"147","fix":"148"},{"desc":"149","fix":"150"},{"desc":"151","fix":"152"},{"desc":"153","fix":"154"},{"messageId":"155","fix":"156","desc":"157"},{"messageId":"158","fix":"159","desc":"160"},{"messageId":"155","fix":"161","desc":"157"},{"messageId":"158","fix":"162","desc":"160"},{"messageId":"155","fix":"163","desc":"157"},{"messageId":"158","fix":"164","desc":"160"},{"messageId":"155","fix":"165","desc":"157"},{"messageId":"158","fix":"166","desc":"160"},{"desc":"167","fix":"168"},{"desc":"169","fix":"170"},{"desc":"147","fix":"171"},"Update the dependencies array to be: [dispatch, history]",{"range":"172","text":"173"},"Update the dependencies array to be: [history]",{"range":"174","text":"175"},"Update the dependencies array to be: [clickedPost, updatePost, url]",{"range":"176","text":"177"},"Update the dependencies array to be: [dispatch, image, state]",{"range":"178","text":"179"},"Update the dependencies array to be: [uploadFields, url]",{"range":"180","text":"181"},"removeEscape",{"range":"182","text":"183"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"184","text":"185"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"186","text":"183"},{"range":"187","text":"185"},{"range":"188","text":"183"},{"range":"189","text":"185"},{"range":"190","text":"183"},{"range":"191","text":"185"},"Update the dependencies array to be: [body, history, title, url]",{"range":"192","text":"193"},"Update the dependencies array to be: [userId]",{"range":"194","text":"195"},{"range":"196","text":"175"},[1975,1984],"[dispatch, history]",[1359,1361],"[history]",[1477,1482],"[clickedPost, updatePost, url]",[1977,1984],"[dispatch, image, state]",[541,546],"[uploadFields, url]",[1221,1222],"",[1221,1221],"\\",[1246,1247],[1246,1246],[544,545],[544,544],[569,570],[569,569],[1420,1425],"[body, history, title, url]",[799,801],"[userId]",[855,857]]